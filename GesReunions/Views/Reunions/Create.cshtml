@model GesReunions.Models.Reunions

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_test.cshtml";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row justify-content-center gutters">
        <div class="col-xl-10 col-lg-10 col-md-12 col-sm-12 col-12">
            <form>
                <div class="card m-0">
                    <div class="card-header">
                        <div class="card-title">Ajout d'une nouvelle reunion</div>
                    </div>
                    <div class="card-body">

                        <!-- Row start -->
                        <div class="row gutters">
                            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    <label for="inputName" class="col-form-label">Titre</label>
                                    @Html.TextBoxFor(model => model.Titre, new { @class = "form-control", @placeholder = "Entrez le titre ici" })
                                    @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <label for="inputEmail" class="col-form-label">Description</label>
                                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @placeholder = "Entrez la description ici", @rows = 5 })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <label for="inputMobNumber" class="col-form-label">Date</label>
                                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })
                                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12">
                                <div class="form-group">
                                    <label for="inputSubject" class="col-form-label">Heures</label>
                                    @Html.EditorFor(model => model.Heures, new { htmlAttributes = new { @class = "form-control", @placeholder = "Entrez le nombre des heures" } })
                                    @Html.ValidationMessageFor(model => model.Heures, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    <label for="inputSubject" class="col-form-label">Salle</label>
                                    @Html.DropDownList("Lieu", null, htmlAttributes: new { @class = "form-control", @placeholder = "choisir une salle" })
                                    @Html.ValidationMessageFor(model => model.Lieu, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    <label for="inputMessage" class="col-form-label">Participants</label>
                                    <input type="text" id="utilisateurEmail" class="form-control" placeholder="Taper pour choisir les participants" />
                                    <div id="selectedUsers"></div>
                                </div>
                            </div>
                        </div>
                        <!-- Row end -->
                        <!-- Row start -->
                        <div class="row gutters">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Enregistrer la reunion" class="btn btn-primary float-right" />
                            </div>
                        </div>

                        <!-- Row end -->

                    </div>
                </div>
            </form>
        </div>

    </div> <!-- Row end -->
    <div>
        <a href="@Url.Action("Index")" class="btn btn-secondary" style="text-decoration:none;">
            <i class="fas fa-arrow-left"></i> Retour
        </a>
    </div>
    @*  <div class="form-horizontal">
            <h4>Reunions</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Titre, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Titre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local" } })
                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Heures, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Heures, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Heures, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Lieu, "Lieu", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Lieu", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Lieu, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Sélectionnez les utilisateurs :", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" id="utilisateurEmail" class="form-control" />
                    <div id="selectedUsers"></div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    *@
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script>
        $(function () {
            $("#utilisateurEmail").autocomplete({
                source: function (request, response) {
                   @* $.ajax({
                        url: '@Url.Action("GetUserEmails", "Reunions")',
                        dataType: "json",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            response(data);
                        }
                    });*@
                    $.ajax({
                        type: "POST",
                        url: "/Reunions/GetUserEmails",
                        data: { term: request.term },
                        success: function (data) {
                            console.log(data);
                            var formattedData = $.map(data, function (item) {
                                return {
                                    label: item.Email, // Affiche l'email
                                    value: item.Email, // La valeur est également l'email
                                    id: item.Id // Ajoute l'ID pour l'utilisation dans la sélection
                                };
                            });
                            response(formattedData);
                        }
                    });
                },
                select: function (event, ui) {
                    console.log('Selected item:', ui.item); // Affiche l'objet complet
                    var selectedEmail = ui.item.value; // Utilisez value (qui est l'email)
                    var selectedId = ui.item.id; // Utilisez id

                    console.log('Selected Email:', selectedEmail); // Affiche l'email sélectionné
                    console.log('Selected ID:', selectedId); // Affiche l'ID sélectionné

                    if ($("#selectedUsers input[value='" + selectedId + "']").length === 0) {
                        $("#selectedUsers").append('<div class="selected-email">' + selectedEmail + '<input type="hidden" name="utilisateursSelectionnes" value="' + selectedId + '" /></div>');
                    }
                    $(this).val('');
                    return false;
                }
            });
        });
    </script>
}
